apiVersion: v1
kind: ConfigMap
metadata:
  name: valkey-poc
data:
  valkey-base.conf: |
    # to be added by sidecar/init-container for malformed ACL failover
    # user __valkey_admin_name__ on >__valkey_admin_pass__ +@all ~*
    # user __primary_replication_user__ on >__primary_replication_pass__ +@all ~*
    
    # to be added by the sidecar/init-container for cluster replication
    # the user/pass must exist in acl
    # masteruser __primary_replication_user__
    # masterauth __primary_replication_pass__
        
    # cluster related settings
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 10000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    
    # tls related settings
    tls-port 6379
    port 0
    tls-cert-file /etc/valkey-cluster/tls/server.crt
    tls-key-file /etc/valkey-cluster/tls/server.key
    tls-ca-cert-file /etc/valkey-cluster/tls/ca_bundle.pem
    tls-auth-clients yes
    tls-cluster yes
    tls-replication yes
    
    # db save related settings
    save 60 100
    dbfilename dump.rdb
    dir /data
    
    # aof related settings
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec              # Fsync policy: always, everysec, or no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # acl related settings
    user default off
    aclfile /etc/valkey-cluster/valkey-configs/users.acl
    
  sidecar-conf: |
    valkey-operator-url: https://valkey-operator.namespace:17379

    unbound-cluster: false

    exporterEnabled: true

  valkey-preStop.sh: |
    #!/bin/sh
    
    # Create the signal file
    touch /tmp/pod-deleted-signal.txt
    echo "Waiting for /tmp/pod-deleted-signal.txt to be deleted..."
    
    # Loop until the file is gone
    while [ -f /tmp/pod-deleted-signal.txt ]; do
      sleep 1
    done
    
    echo "Signal file deleted. Exiting."
---
apiVersion: v1
kind: Secret
metadata:
  name: valkey-poc
stringData:
  valkey-pass: myVeryStrongPass
type: Opaque


---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9121"
    prometheus.io/scrape: "true"
  name: valkey-poc
spec:
  ports:
  - name: resp
    port: 6379
    protocol: TCP
    targetPort: 6379
  - name: prom
    port: 9121
    protocol: TCP
    targetPort: 9121
  selector:
    app: valkey-poc
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: valkey-poc-head
spec:
  clusterIP: None
  ports:
  - name: resp
    port: 6379
    protocol: TCP
    targetPort: 6379
  - name: cluster-bus
    port: 16379
    protocol: TCP
    targetPort: 16379
  publishNotReadyAddresses: true
  selector:
    app: valkey-poc
  type: ClusterIP

---
# TBD - acl created by init container in a shared dir
# TBD - tls created by init container in a shared dir
# TBD - tls splitted per server and clients (sidecar and exporter). also change the CRs
# TBD - valkey.conf created by init container in a shared dir (add also cluster pass there)
# add option in CR if sysctl -w - net.core.somaxconn=10000 is needed. NB chown above files to "1000"

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: valkey-poc
spec:
  replicas: 6
  selector:
    matchLabels:
      app: valkey-poc
  serviceName: valkey-poc-head
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: valkey-poc
        app.kubernetes.io/component: cache
        app.kubernetes.io/instance: valkey-poc
        app.kubernetes.io/name: valkey
        app.kubernetes.io/version: 8.1.1
    spec:
      initContainers:
      - name: init-valkey-sysctl
        image: ghcr.io/valkeyoperatorsidecar
        imagePullPolicy: IfNotPresent
        env:
        # sysctl -w net.core.somaxconn=10000
        # it is mandatory to have securityContext.privileged: true
        - name: SET_SOMAXCONN
          value: "true"
        securityContext:
          privileged: true
        volumeMounts:
        - name: valkey-poc-data
          mountPath: /data
        - name: valkey-certs-volume
          mount-path: "/etc/valkey-cluster/valkey-certs"
        - name: valkey-configs-volume
          mount-path: "/etc/valkey-cluster/valkey-configs"
        - name: exporter-certs-volume
          mountPath: "/etc/valkey-cluster/exporter-certs"
        - name: exporter-configs-volume
          mountPath: "/etc/valkey-cluster/exporter-configs"
        - name: sidecar-tranzit-volume
          mountPath: /opt/valkey-operator-sidecar/tranzit
        - name: valkey-operator-vars-volume
          mountPath: "/opt/valkey-cluster/vars"
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: sidecar-base-config-volume
          mountPath: /etc/valkey-cluster/base-config
          readOnly: true
        - name: tls-volume
          mountPath: "/etc/valkey-cluster/tls"
          readOnly: true
        - name: mtls-volume
          mountPath: "/etc/valkey-cluster/mtls"
          readOnly: true
        - name: acl-volume
          mountPath: "/etc/valkey-cluster/acl"
          readOnly: true
        ports:
        - name: grpc
          containerPort: 17369   # TBD - to define this
          protocol: TCP
      containers:
      - name: valkey
        image: valkey/valkey-bundle:8.1.1-alpine
        imagePullPolicy: IfNotPresent
        args:
        - /data/valkey.conf
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: VALKEY_DATA_DIR
          value: /data
        - name: VALKEY_CLUSTER_PASS
          valueFrom:
            secretKeyRef:
              name: valkey-poc
              key: valkey-cluster-pass  # TBD - to define this as protected
        - name: VALKEY_EXTRA_FLAGS
          value: "--cluster-announce-ip $(POD_NAME).$(CLUSTER_SUFFIX)"
        ports:
        - containerPort: 6379
          name: resp
          protocol: TCP
        - containerPort: 16379
          name: cluster-bus
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 256Mi
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","/opt/valkey-cluster/vars/valkey-preStop.sh"]
        volumeMounts:
        - name: valkey-poc-data
          mountPath: /data
        - name: valkey-certs-volume
          mount-path: "/etc/valkey-cluster/valkey-certs"
          readOnly: true
        - name: valkey-configs-volume
          mount-path: "/etc/valkey-cluster/valkey-configs"
          readOnly: true
        - name: valkey-operator-vars-volume
          mountPath: "/opt/valkey-cluster/vars"
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
      - name: valkey-operator-sidecar
        image: ghcr.io/valkeyoperatorsidecar
        imagePullPolicy: IfNotPresent
        env:
        - name: VALKEY_USER      # TBD - to create de dedicated user for this with minimal rights
          value: valkey-admin    # TBD - to define this as protected
        - name: VALKEY_PASS
          valueFrom:
            secretKeyRef:
              name: valkey-poc
              key: valkey-pass   # TBD - to define this as protected
        ports:
        - name: grpc
          containerPort: 17369   # TBD - to define this
          protocol: TCP
        - name: liveness
          containerPort: 18369   # TBD - to define this
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz/live  # TBD - to define this
            port: liveness
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: liveness
          initialDelaySeconds: 30
          periodSeconds: 30
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","/opt/valkey-cluster/vars/valkey-preStop.sh"]
        volumeMounts:
        - name: valkey-poc-data
          mountPath: /data
        - name: valkey-certs-volume
          mount-path: "/etc/valkey-cluster/valkey-certs"
        - name: valkey-configs-volume
          mount-path: "/etc/valkey-cluster/valkey-configs"
        - name: exporter-certs-volume
          mountPath: "/etc/valkey-cluster/exporter-certs"
        - name: exporter-configs-volume
          mountPath: "/etc/valkey-cluster/exporter-configs"
        - name: sidecar-tranzit-volume
          mountPath: /opt/valkey-operator-sidecar/tranzit
        - name: valkey-operator-vars-volume
          mountPath: "/opt/valkey-cluster/vars"
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: sidecar-base-config-volume
          mountPath: /etc/valkey-cluster/base-config
          readOnly: true
        - name: tls-volume
          mountPath: "/etc/valkey-cluster/tls"
          readOnly: true
        - name: mtls-volume
          mountPath: "/etc/valkey-cluster/mtls"
          readOnly: true
        - name: acl-volume
          mountPath: "/etc/valkey-cluster/acl"
          readOnly: true
      - name: valkey-exporter
        image: oliver006/redis_exporter:v1.67.0-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: REDIS_EXPORTER_TLS_CLIENT_CERT_FILE
          value: /etc/valkey-cluster/exporter-certs/client.crt
        - name: REDIS_EXPORTER_TLS_CLIENT_KEY_FILE
          value: /etc/valkey-cluster/exporter-certs/client.key
        - name: REDIS_EXPORTER_TLS_CA_CERT_FILE
          value: /etc/valkey-cluster/exporter-certs/ca.crt
        - name: REDIS_EXPORTER_REDIS_PASSWORD_FILE
          value: /etc/valkey-cluster/exporter-configs/pwd-file.json
        name: valkey-exporter
        ports:
        - containerPort: 9121
          name: exporter-port
          protocol: TCP
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","/opt/valkey-cluster/vars/valkey-preStop.sh"]
        volumeMounts:
        - name: exporter-certs-volume
          mountPath: "/etc/valkey-cluster/exporter-certs"
          readOnly: true
        - name: exporter-configs-volume
          mountPath: "/etc/valkey-cluster/exporter-configs"
          readOnly: true
        - name: valkey-operator-vars-volume
          mountPath: "/opt/valkey-cluster/vars"
          readOnly: true
        - name: tmp-volume
          mountPath: "/tmp"
      terminationGracePeriodSeconds: 30
      volumes:
      - name: valkey-certs-volume
        emptyDir:
          size: 1Mi
      - name: valkey-configs-volume
        emptyDir:
          size: 1Mi
      - name: exporter-certs-volume
        emptyDir:
          size: 1Mi
      - name: exporter-configs-volume
        emptyDir:
          size: 1Mi
      - name: sidecar-tranzit-volume
        emptyDir:
          sizeLimit: 1024Mi
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1024Mi
      - name: valkey-operator-vars-volume
        configMap:
          name: valkey-poc
      - name: tls-volume
        # csi and secret are mutually exclusive
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "valkey-poc-tls-secret"
        secret:
          secretName: valkey-poc-tls-secret
      - name: mtls-volume
        secret:
          secretName: valkey-poc-mtls-secret
      - name: acl-volume
        # csi and secret are mutually exclusive
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "valkey-poc-acl-secret"
        secret:
          secretName: valkey-poc-acl-secret
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: valkey-poc-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
      storageClassName: my-storage-class
      volumeMode: Filesystem

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: valkey-poc
spec:
  minAvailable: N-1
  selector:
    matchLabels:
      app: valkey-poc
